# Configuration file for PowerPC
# Note: If you are trying to determine whether or not a particular processor
# is supported, use "dctrl -t".  Many processors map into target flags with
# an architectural variant, rather than a specific processor.  For example,
# if one enters PPC5532, the resulting target flag contains "-tPPCE200Z3N"

ISVLE=0
USE_SPE_HANDLER=0
USE_SPE_APU=0
#VLEFLAGS="-D__PPC_VLE__ -Wa,-Xcpu-5534 -Wa,-Xisa-vle -Xname-code=.text_vle -Xname-const=.text_vle -Xstsw-slow"
VLEFLAGS="-D__PPC_VLE__ -Wa,-Xisa-vle -Xname-code=.text_vle -Xname-const=.text_vle -Xstsw-slow"

DFORMAT=PPC
DLIB="$DCC$/$DFORMAT"

switch($DTARGET)
case PPC55??*: 
case PPC56??*: 
	XFLAGS="$XFLAGS -Xintc-eoir"
	break
endsw

# Map the PPC5534[NV] target name to PPC5554 and PPC5534, respectively.
# Note that assigning to DTARGET only has effect in the config file.  The
# invoking tools notion of the first part of the target flag is not changed.
switch($DTARGET)
case PPC5534N: 
	DTARGET=PPC5554			# map 5534 "N"on-vle to equivalent
	break
case PPC5534V: 
	DTARGET=PPC5534			# map 5534 "V"le to equivalent
	break
# Map the following VLE processors to e#00 architectures.
case PPC5510:
        DTARGET=PPCE200Z1V
        break
case PPC5561:
case PPC5565:
case PPC5668G:
        DTARGET=PPCE200Z6V
        break
case PPC560[1-4]B:
case PPC560[2-4]C:
case PPC560[2-4]P:
case PPC560[2-4]PE:
        DTARGET=PPCE200Z0V
        break
case PPC560[246]S:
case PPC5645S:
case SPC560P44:
case SPC560P50:
case SPC560[BC]40:
case SPC560[BC]44:
case SPC560[BC]50:
case SPC560S[56]0:
        DTARGET=PPCE200Z0HV
        break
case PPC563[2-4]M:
        DTARGET=PPCE200Z3V
        break
case SPC563M54:
case SPC563M60:
case SPC563M64:
        DTARGET=PPCE200Z335V
        break
case PPC5643:
	DTARGET=PPCE200Z4V
	break
case PPC567[34]F:
        DTARGET=PPCE200Z7V
        break
endsw
DO_LLOPT=1

switch($DTARGET)
case PA6T:
	if ($DFP == V) XFLAGS="$XFLAGS -XPPC7400 -Xvector-on -D__VEC__=10205 -Wa,-Xisa-pa6t -Wa,-Xcpu-pa6t -Xkeywords=0x1e0 -Xintrinsic-mask=0xc0001f"
	else XFLAGS="$XFLAGS -XPPC603 -Wa,-Xisa-pa6t -Wa,-Xcpu-pa6t"
	if ($DFP == V) AFLAGS="$AFLAGS -Xisa-pa6t -Xcpu-pa6t"
	else AFLAGS="$AFLAGS -Xisa-pa6t -Xcpu-pa6t"
	break
case PPC:
	if ($DFP == V) XFLAGS="$XFLAGS -XPPC7400 -Xvector-on -D__VEC__=10205 -Wa,-Xcpu-7400 -Xkeywords=0x1e0 -Xintrinsic-mask=0xc0001f"
	else XFLAGS="$XFLAGS -XPPC603"
	if ($DFP == V) AFLAGS="$AFLAGS -Xcpu-7400"
	else AFLAGS="$AFLAGS -Xcpu-603"
	break
case PPC601:
	XFLAGS="$XFLAGS -XPPC601"
	AFLAGS="$AFLAGS -Xcpu-601"
	break
case PPC602:
	XFLAGS="$XFLAGS -XPPC602"
	AFLAGS="$AFLAGS -Xcpu-602"
	break
case MGT5200:
case PPC5200B:
	DTARGET=PPC603
case PPC8247:
case PPC8248:
case PPC8271:
case PPC8272:
case PPC603:
case PPC603e:
	XFLAGS="$XFLAGS -XPPC603"
	AFLAGS="$AFLAGS -Xcpu-603"
	break
case PPC8313:
case PPC8314:
case PPC8315:
case PPC8321:
case PPC8323:
case PPC8343:
case PPC8347:
case MPC8347E:
case PPC8349:
case PPC8358:
case PPC8360:
case PPC8365:
case PPC8377:
case PPC8378:
case PPC8379:
case PPC5121:
case PPC5123:
case PPCE300:
	XFLAGS="$XFLAGS -XPPC603"
	AFLAGS="$AFLAGS -Xcpu-e300"
	break
case PPCE500MC:
	XFLAGS="$XFLAGS -XPPCE500MC -Xapu-storage -Xapu-wait -Xstsw-slow"
	AFLAGS="$AFLAGS -Xcpu-e500mc -Xapu-storage -Xapu-wait -Xhypervisor"
	break
case PPC604:
	XFLAGS="$XFLAGS -XPPC604"
	AFLAGS="$AFLAGS -Xcpu-604"
	break
case PPC401:
	XFLAGS="$XFLAGS -XPPC401"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-401"
	break
case PPC403:
	XFLAGS="$XFLAGS -XPPC403"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-403"
	break
case PPC405:
	XFLAGS="$XFLAGS -XPPC405 -Xintrinsic-mask=0xc0002f"
	AFLAGS="$AFLAGS -Xcpu-405"
	break
case PPC440:
	XFLAGS="$XFLAGS -XPPC440 -Xintrinsic-mask=0xc0002f"
	AFLAGS="$AFLAGS -Xcpu-440"
	break
case PPC440GX:
	XFLAGS="$XFLAGS -XPPC440GX -Xintrinsic-mask=0xc0002f"
	AFLAGS="$AFLAGS -Xcpu-440gx"
	break
case PPC505:
	DTARGET=PPC505
	XFLAGS="$XFLAGS -XPPC505"
	AFLAGS="$AFLAGS -Xcpu-505"
	break
case PPC509:
	DTARGET=PPC509
	XFLAGS="$XFLAGS -XPPC509"
	AFLAGS="$AFLAGS -Xcpu-509"
	break
# E500Z3 is E500 core + VLE.
# PPC5534/PPC5566/PPC5567/PPCVLE, PPCE200Z3V and PPCE200Z6V are mapped to -XPPCE200Z3,
case PPC5534:
case PPC5566:
case PPC5567:
case PPCVLE:
	DTARGET=PPC5534
	ISVLE=1
	USE_SPE_APU=1
	DCD="$DLIB$/PPCVLE.cd"
	XFLAGS="$XFLAGS -XPPCE200Z3 $VLEFLAGS -D__SPE__ -D__EVEC__=81402 -Xkeywords=0xff0000 -Xintrinsic-mask=0xc00041"
	AFLAGS="$AFLAGS -Xcpu-5534 -Xisa-vle"
	LFLAGS="$LFLAGS -Xcheck-sections=1"
	break
case PPC553:
	DTARGET=PPC553
	XFLAGS="$XFLAGS -XPPC553"
	AFLAGS="$AFLAGS -Xcpu-553"
	break
case PPC533:
case PPC534:
case PPC535:
case PPC536:
case PPC555:
case PPC560:
case PPC561:
case PPC562:
case PPC563:
case PPC564:
case PPC565:
case PPC566:
	DTARGET=PPC555
	XFLAGS="$XFLAGS -XPPC555"
	AFLAGS="$AFLAGS -Xcpu-555"
	break
case PPC740:
	DTARGET=PPC740
	XFLAGS="$XFLAGS -XPPC740"
	AFLAGS="$AFLAGS -Xcpu-740"
	break
case PPC745:
	DTARGET=PPC745
	XFLAGS="$XFLAGS -XPPC745"
	AFLAGS="$AFLAGS -Xcpu-745"
	break
case PPC750:
	DTARGET=PPC750
	XFLAGS="$XFLAGS -XPPC750"
	AFLAGS="$AFLAGS -Xcpu-750"
	break
case PPC755:
	DTARGET=PPC755
	XFLAGS="$XFLAGS -XPPC755"
	AFLAGS="$AFLAGS -Xcpu-755"
	break
case PPC801:
	XFLAGS="$XFLAGS -XPPC801"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-801"
	break
case PPC821:
	XFLAGS="$XFLAGS -XPPC821"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-821"
	break
case PPC823:
case PPC823E:
	XFLAGS="$XFLAGS -XPPC823"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-823"
	break
case PPC850:
	XFLAGS="$XFLAGS -XPPC850"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-850"
	break
case PPC852:
	XFLAGS="$XFLAGS -XPPC852"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-852"
	break
case PPC853:
	XFLAGS="$XFLAGS -XPPC853"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-853"
	break
case PPC855:
	XFLAGS="$XFLAGS -XPPC855"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-855"
	break
case PPC857:
	XFLAGS="$XFLAGS -XPPC857"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-857"
	break
case PPC859:
	XFLAGS="$XFLAGS -XPPC859"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-859"
	break
case PPC860:
	XFLAGS="$XFLAGS -XPPC860"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-860"
	break
case PPC862:
	XFLAGS="$XFLAGS -XPPC862"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-862"
	break
case PPC866:
case PPC870:
case PPC875:
case PPC880:
case PPC885:
	XFLAGS="$XFLAGS -XPPC866"
	DTFP=S
	AFLAGS="$AFLAGS -Xcpu-866"
	break
case PPC970:
	if ($DFP == V) XFLAGS="$XFLAGS -XPPC970 -Xvector-on -D__VEC__=10205 -Wa,-Xcpu-970 -Wa,-Xppc64bridge -Xkeywords=0x1e0 -Xintrinsic-mask=0xc0001f"
	else XFLAGS="$XFLAGS -XPPC970"
	AFLAGS="$AFLAGS -Xcpu-970 -Xppc64bridge"
	break
case PPC7400:
	if ($DFP == V) XFLAGS="$XFLAGS -XPPC7400 -Xvector-on -D__VEC__=10205 -Wa,-Xcpu-7400 -Xkeywords=0x1e0 -Xintrinsic-mask=0xc0001f"
	else XFLAGS="$XFLAGS -XPPC7400"
	AFLAGS="$AFLAGS -Xcpu-7400"
	break
case PPC7410:
	if ($DFP == V) XFLAGS="$XFLAGS -XPPC7410 -Xvector-on -D__VEC__=10205 -Wa,-Xcpu-7400 -Xkeywords=0x1e0 -Xintrinsic-mask=0xc0001f"
	else XFLAGS="$XFLAGS -XPPC7410"
	AFLAGS="$AFLAGS -Xcpu-7400"
	break
case PPC7440:
case PPC7441:
case PPC7445:
case PPC7447:
case PPC7447A:
case PPC7448:
	if ($DFP == V) XFLAGS="$XFLAGS -XPPC7440 -Xvector-on -D__VEC__=10205 -Wa,-Xcpu-7400 -Xkeywords=0x1e0 -Xintrinsic-mask=0xc0001f"
        else XFLAGS="$XFLAGS -XPPC7440"
        AFLAGS="$AFLAGS -Xcpu-7400"
        break
case PPC7450:
case PPC7451:
case PPC7455:
case PPC7457:
case PPC8610:
case PPC8640:
case PPC8641:
case PPC8641D:
	if ($DFP == V) XFLAGS="$XFLAGS -XPPC7450 -Xvector-on -D__VEC__=10205 -Wa,-Xcpu-7400 -Xkeywords=0x1e0 -Xintrinsic-mask=0xc0001f"
        else XFLAGS="$XFLAGS -XPPC7450"
        AFLAGS="$AFLAGS -Xcpu-7400"
        break
case PPC8240:
	XFLAGS="$XFLAGS -XPPC8240"
	AFLAGS="$AFLAGS -Xcpu-8240"
	break
case PPC8241:
	XFLAGS="$XFLAGS -XPPC8241"
	AFLAGS="$AFLAGS -Xcpu-8241"
	break
case PPC8245:
	XFLAGS="$XFLAGS -XPPC8245"
	AFLAGS="$AFLAGS -Xcpu-8245"
	break
case PPC8250:
	XFLAGS="$XFLAGS -XPPC8250"
	AFLAGS="$AFLAGS -Xcpu-8250"
	break
case PPC8255:
	XFLAGS="$XFLAGS -XPPC8255"
	AFLAGS="$AFLAGS -Xcpu-8255"
	break
case PPC8260:
	XFLAGS="$XFLAGS -XPPC8260"
	AFLAGS="$AFLAGS -Xcpu-8260"
	break
case PPC8264:
	XFLAGS="$XFLAGS -XPPC8264"
	AFLAGS="$AFLAGS -Xcpu-8264"
	break
case PPC8265:
	XFLAGS="$XFLAGS -XPPC8265"
	AFLAGS="$AFLAGS -Xcpu-8265"
	break
case PPC8266:
	XFLAGS="$XFLAGS -XPPC8266"
	AFLAGS="$AFLAGS -Xcpu-8266"
	break
case PPC8270:
	XFLAGS="$XFLAGS -XPPC8270"
	AFLAGS="$AFLAGS -Xcpu-8270"
	break
case PPC8275:
	XFLAGS="$XFLAGS -XPPC8275"
	AFLAGS="$AFLAGS -Xcpu-8275"
	break
case PPC8280:
	XFLAGS="$XFLAGS -XPPC8280"
	AFLAGS="$AFLAGS -Xcpu-8280"
	break
case PPC8535:
case PPC8536:
case PPC8540:
	XFLAGS="$XFLAGS -XPPC8540 -D__SPE__ -D__EVEC__=81402 -Xkeywords=0xff0000 -Xintrinsic-mask=0xc00041 -Xstsw-slow"
	AFLAGS="$AFLAGS -Xcpu-e500"
	USE_SPE_APU=1
	break
case PPC8560:
	XFLAGS="$XFLAGS -XPPC8560 -D__SPE__ -D__EVEC__=81402 -Xkeywords=0xff0000 -Xintrinsic-mask=0xc00041 -Xstsw-slow"
	AFLAGS="$AFLAGS -Xcpu-e500"
	USE_SPE_APU=1
	break
case MPC55*:
case PPC5500:
case PPC5553:
case PPC5554:
	XFLAGS="$XFLAGS -XPPC5554 -D__SPE__ -D__EVEC__=81402 -Xkeywords=0xff0000 -Xintrinsic-mask=0xc00041 -Xstsw-slow"
	AFLAGS="$AFLAGS -Xcpu-5554"
	USE_SPE_APU=1
	break
case PPC8555:
case PPCE500:
case PPC5534N:
	XFLAGS="$XFLAGS -XPPCE500 -D__SPE__ -D__EVEC__=81402 -Xkeywords=0xff0000 -Xintrinsic-mask=0xc00041 -Xstsw-slow"
	AFLAGS="$AFLAGS -Xcpu-e500"
	USE_SPE_APU=1
	break
# Add support for e#00 architecture variant names.  Intent is to group 
# functionality using these names, rather than by processor number.

# Compiler flags controlling features
# BookE => -XPPCE500
# load/store string => -Xstsw-ok (-Xstsw-slow not available)
# isel => -XPPCE500
# debug => not generated by compiler
# SPE (Signal Processing Engine; ev*) 
#   => 
#     -Xintrinsic-mask=0x000040 (which intrinsics are allowed)
#     -Xkeywords=0xff0000 (which keywords are allowed in defining datatypes;
#                          these keywords creates EVVEC types used in node 
#                          matching in the compiler .nd file)
#     -D__SPE__ (supplied to user source)
#     -D__EVEC__=81402 (supplied to user source)
# single embedded (SPFP) 
#   scalar(scalar SPFP) (e*)
#   vector(vector SPFP) (evf*) 
#     => 
#       -Xintrinsic-mask=0x000040 (which intrinsics are allowed)
#       -Xkeywords=0xff0000 (which keywords are allowed in defining datatypes;
#                            these keywords creates EVVEC types used in node 
#                            matching in the compiler .nd file)
# double embedded (DPFP) (efd*) 
#   => 
#     -Xintrinsic-mask=0x000080 (which intrinsics are allowed)
#     -Xkeywords=0xff0000
# device control (mfdcr, mtdcr, mfapidi) => not generated by compiler

# Assembler flags controlling features
# BookE = -Xcpu-e500
# load/store string => none
# device control (mfdcr, mtdcr, mfapidi) controlled on a per register basis!
# isel => -XPPCE500
# debug => -Xcpu-5554 or -Xcpu-5534
# SPE () => -Xcpu-e500 or -Xcpu-e500v2 or -Xcpu-5554 or -Xcpu-5534
# single embedded (SPFP) 
#   scalar(scalar SPFP) (e*)
#   vector(vector SPFP) (evf*) => -Xcpu-e500
# double embedded (DPFP) (efd*) => -Xcpu-e500v2
# device control (mfdcr, mtdcr, mfapidi) => always recognized

# PPCE200Z3 => BookE - {BookE FP, load/store string, device control/mfapidi} 
#           + isel + debug + SPE + single embedded scalar/vector
case PPCE200Z3V:
case PPCE200Z335V:
	ISVLE=1
	DCD="$DLIB$/PPCVLE.cd"
	XFLAGS="$XFLAGS  -XPPCE200Z3 $VLEFLAGS"
	AFLAGS="$AFLAGS -Xcpu-5534 -Xisa-vle"
	if ($DTARGET == PPCE200Z335V) {
		AFLAGS="$AFLAGS -Xenable-apu-wait"
	}
	LFLAGS="$LFLAGS -Xcheck-sections=1"
	break
case PPCE200Z3N:
case PPCE200Z335N:
	XFLAGS="$XFLAGS -XPPCE200Z3 -Xstsw-slow -Xintrinsic-mask=0xc00041 -Xkeywords=0xff0000 -D__SPE__"
	AFLAGS="$AFLAGS -Xcpu-e500"
	USE_SPE_APU=1
        break

# PPCE200Z0 PPCE200Z0H => VLE only
case PPCE200Z0V:
case PPCE200Z0HV:
	ISVLE=1
	DCD="$DLIB$/PPCVLE.cd"
	XFLAGS="$XFLAGS -XPPCE200Z0 $VLEFLAGS"
	AFLAGS="$AFLAGS -Xcpu-5534 -Xisa-vle -Xenable-apu-wait"
	LFLAGS="$LFLAGS -Xcheck-sections=1"
        break

# PPCE200Z1 => BookE - {BookE FP, load/store string, device control/mfapidi} 
#           + isel + debug + wait
case PPC5516Z1:
case PPCE200Z1V:
	ISVLE=1
	DCD="$DLIB$/PPCVLE.cd"
	XFLAGS="$XFLAGS -XPPCE200Z1 $VLEFLAGS"
	AFLAGS="$AFLAGS -Xcpu-5534 -Xisa-vle -Xenable-apu-wait"
	LFLAGS="$LFLAGS -Xcheck-sections=1"
	break
case PPCE200Z1N:
	XFLAGS="$XFLAGS -XPPCE200Z1 -Xstsw-slow -Xintrinsic-mask=0xc00001"
	AFLAGS="$AFLAGS -Xcpu-e500 -Xenable-apu-wait"
        break

# PPCE200Z6 => BookE - {BookE FP, load/store string} 
#           + isel + cache + debug + SPE + single embedded scalar/vector
case PPCE200Z6V:
	ISVLE=1
	DCD="$DLIB$/PPCVLE.cd"
	XFLAGS="$XFLAGS -XPPCE200Z6 $VLEFLAGS"
	AFLAGS="$AFLAGS -Xcpu-5534 -Xisa-vle"
	LFLAGS="$LFLAGS -Xcheck-sections=1"
	break
case PPCE200Z6N:
	XFLAGS="$XFLAGS -XPPCE200Z6 -Xstsw-slow -Xintrinsic-mask=0xc00041 -Xkeywords=0xff0000 -D__SPE__"
	AFLAGS="$AFLAGS -Xcpu-e500"
	USE_SPE_APU=1
        break

# PPCE200Z4
# PPCE200Z4D
# PPCE200Z7 => BookE - {BookE FP, load/store string, device control/mfapidi} 
#           + isel + debug + wait + SPE + Machine Check APU + Cache Line-locking APU
#	    + The Enhanced Reservations APU
case PPCE200Z4V:
case PPCE200Z4DV:
 	ISVLE=1
	DCD="$DLIB$/PPCVLE.cd"
	XFLAGS="$XFLAGS -XPPCE200Z4 $VLEFLAGS"
	AFLAGS="$AFLAGS -Xcpu-e200z4 -Xisa-vle -Xenable-apu-wait -Xapu-volatile-context"
	LFLAGS="$LFLAGS -Xcheck-sections=1"
        USE_SPE_APU=1
	break
case PPCE200Z4N:
case PPCE200Z4DN:
	XFLAGS="$XFLAGS -XPPCE200Z4 -Xstsw-slow -Xintrinsic-mask=0xc00041 -Xkeywords=0xff0000 -D__SPE__"
	AFLAGS="$AFLAGS -Xcpu-e200z4 -Xenable-apu-wait -Xapu-volatile-context"
	USE_SPE_APU=1
        break

case PPCE200Z7V:
	ISVLE=1
	DCD="$DLIB$/PPCVLE.cd"
	XFLAGS="$XFLAGS -XPPCE200Z7 $VLEFLAGS"
	AFLAGS="$AFLAGS -Xcpu-5534 -Xisa-vle -Xenable-apu-wait"
	LFLAGS="$LFLAGS -Xcheck-sections=1"
	break
case PPCE200Z7N:
	XFLAGS="$XFLAGS -XPPCE200Z7 -Xstsw-slow -Xintrinsic-mask=0xc00041 -Xkeywords=0xff0000 -D__SPE__"
	AFLAGS="$AFLAGS -Xcpu-e500 -Xenable-apu-wait"
	USE_SPE_APU=1
        break

case MPC8533E:
case PPC8533:
case MPC8541E:
case PPC8541:
case MPC8543E:
case PPC8543:
case MPC8544E:
case PPC8544:
case MPC8545E:
case PPC8545:
case MPC8547E:
case PPC8547:
case MPC8548E:
case PPC8548:
case MPC8567E:
case PPC8567:
case MPC8568E:
case PPC8568:
case MPC8569E:
case PPC8569:
case MPC8572E:
case PPC8572:
case PPCE500V2:
	XFLAGS="$XFLAGS -XPPCE500V2 -D__softfp_abi -D__SPE__ -D__EVEC__=81402 -Xkeywords=0xff0000 -Xintrinsic-mask=0xc000c1 -Xstsw-slow"
	AFLAGS="$AFLAGS -Xcpu-e500v2"
	USE_SPE_APU=1
	break
case POWER:
	DO_LLOPT=0
	XFLAGS="$XFLAGS -XPOWER"
	AFLAGS="$AFLAGS -Xcpu-power"
	break
case *:
	print "dtools.conf: DTARGET ($DTARGET) not implemented"
	print " Use the -t option"
	error
	break
endsw

switch($DOBJECT)
case D:
	AFLAGS="$AFLAGS -Xobject-format=coff"
	XFLAGS="$XFLAGS -Xconventions-aix"
	break
case C:
	AFLAGS="$AFLAGS -Xobject-format=elf -Xprepare-compress"
	XFLAGS="$XFLAGS -Xconventions-eabi -Xprepare-compress -D__EABI__"
	LFLAGS="$LFLAGS -Xassociate-headers -r2 -Xmax-long-branch=1048576"
	break
case E:
	AFLAGS="$AFLAGS -Xobject-format=elf"
	XFLAGS="$XFLAGS -Xconventions-eabi -D__EABI__ -D__BIG_ENDIAN__"
	break
case F:
	AFLAGS="$AFLAGS -Xobject-format=elf"
	XFLAGS="$XFLAGS -Xconventions-eabi -D__EABI__ -D__BIG_ENDIAN__ -Xsmall-data=0 -Xsmall-const=0 -D__NO_SDATA__"
	break
case L:
	AFLAGS="$AFLAGS -Xobject-format=elf -Xlittle-endian"
	XFLAGS="$XFLAGS -Xconventions-eabi -D__EABI__ -Xlittle-endian -D__LITTLE_ENDIAN__"
	break
case M:
	AFLAGS="$AFLAGS -Xobject-format=elf -Xlittle-endian"
	XFLAGS="$XFLAGS -Xconventions-eabi -D__EABI__ -Xlittle-endian -D__LITTLE_ENDIAN__ -Xsmall-data=0 -Xsmall-const=0 -D__NO_SDATA__"
	break
case *:
	print "dtools.conf: DOBJECT ($DOBJECT) not implemented"
	print "C, D, E, F, L and M are supported"
	error
	break
endsw

switch($DFP)
case H:
	switch($DTARGET)
	case MPC55*:
	case PPC5500:
	case PPC5534:
	case PPC5553:
	case PPC5554:
	case PPC8540:
        case PPC8555:
	case PPC8560:
	case PPCE500:
		print "dtools.conf: DFP ($DFP) not implemented"
		print "only N, F, G and S are supported"
		error
		break
	endsw
	if ($ISVLE==1) {
		print "dtools.conf: DFP ($DFP) not implemented"
		print "only N, F, G and S are supported"
		error
	}
	break
case V:
	switch($DTARGET)
	case MPC55*:
	case PPC5500:
	case PPC5534:
	case PPC5553:
	case PPC5554:
	case PPC8540:
	case PPC8560:
		print "dtools.conf: DFP ($DFP) not implemented"
		print "only N, F, G and S are supported"
		error
		break
	endsw
	if ($ISVLE==1) {
		print "dtools.conf: DFP ($DFP) not implemented"
		print "only N, F, G and S are supported"
		error
	}
	break
endsw

if ($DFP == F) XFLAGS="$XFLAGS -Xsoft-float -Xsingle-fp"
if ($DFP == G) XFLAGS="$XFLAGS -Xsoft-float -Xsingle-fp -Xdouble-avoid"
if ($DFP == N) XFLAGS="$XFLAGS -Xsoft-float"
if ($DFP == S) XFLAGS="$XFLAGS -Xsoft-float"

switch($DTARGET)
	case POWER:
		DLIBLG="$DCC$/POWER$DOBJECT"
		break
	case PPC854*:
	case MPC854*:
	case MPC55*:
	case PPC5500:
	case PPC5553:
	case PPC5554:
	case PPCE500:
	case PPCE500V2:
	case PPC8540:
	case PPC8555:
	case PPC8560:
		DLIBLG="$DCC$/PPCE500$DOBJECT"
		break
	case PPCE200Z0N:
	case PPCE200Z1N:
	case PPCE200Z3N:
	case PPCE200Z4N:
	case PPCE200Z6N:
	case PPCE200Z7N:
		DLIBLG="$DCC$/PPCE500$DOBJECT"
		break
	case *:
		if ($ISVLE==1) {
			DLIBLG="$DCC$/PPCVLE$DOBJECT"
		} else {
			DLIBLG="$DCC$/PPC$DOBJECT"
		}
		break
endsw
DLIBLF="$DLIBLG$DFP"
DLIBLFJ="$DLIBLF"
# store values of $DLIBLF and $DLIBLG
DLIBLFB="$DLIBLF"
DLIBLGB="$DLIBLG"
if ($DENVDIR) DLIBLG="$DLIBLG$/$DENVDIR:$DLIBLG"
if ($DENVDIR) DLIBLF="$DLIBLF$/$DENVDIR:$DLIBLF"
if (!$DLIBS) DLIBS="-YP,$DLIBLF:$DLIBLG"
O1=
if ($DO_LLOPT==1) O1="$BIN$/llopt"
if ($DO_LLOPT==1) XFLAGS="$XFLAGS -W1,-a$DLIB$/ppc.xml"

O2="$BIN$/reorder"
O3=
XFLAGS="$XFLAGS -D__ppc -D_SUPPORTS_BUILTIN_PREFETCH"

# if compiling for VLE and environ is cross or simple, use defaultvle.dld, 
# rather picking up default.dld, which doesn't know about .text_vle sections
if ($ISVLE==1) {
	if ($DENVIRON==cross) DLINKFILE=defaultvle.dld
	if ($DENVIRON==simple) DLINKFILE=defaultvle.dld
}

# Pass the APU options to both the front end and to the assembler
if ($-Xapu-*) {
	AFLAGS="$AFLAGS${ $%}"
	WAFLAGS="$WAFLAGS${ -Wa,$%}"
}


