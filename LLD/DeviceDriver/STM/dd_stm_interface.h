#ifndef DD_INTERFACE_STM_H
#define DD_INTERFACE_STM_H

//=============================================================================
// include files
//=============================================================================
#include "dd_stm.h"

//=============================================================================
// STM_Initialize_Device
//=============================================================================
void STM_Initialize_Device(void);
//=============================================================================
// STM_Set_Timer_Enable
//=============================================================================
void STM_Set_Timer_Enable(
   bool in_enable);
//=============================================================================
// STM_Set_Channel_Enable
//=============================================================================
void STM_Set_Channel_Enable( 
      STM_Channel_Index_T channel,
      bool in_enable);

//=============================================================================
// STM_Get_Channel_Enable
//=============================================================================
bool STM_Get_Channel_Enable( 
      STM_Channel_Index_T channel);

//=============================================================================
// STM_Timer_Set_Value
//=============================================================================
void STM_Timer_Set_Value(
    STM_Channel_Index_T channel,
     uint32_t  in_time  );

//=============================================================================
// STM_Timer_Get_Value
//=============================================================================
static INLINE uint32_t STM_Timer_Get_Value(void)
{
   return (uint32_t)(STM.CNT);
}

//=============================================================================
// STM_Timer_Get_Value
//=============================================================================
#define time_get STM_Timer_Get
static INLINE uint32_t STM_Timer_Get(uint32_t delay)
{
   return (uint32_t)(STM.CNT + delay);
}

//=============================================================================
// STM_Timer_Get_Value
//=============================================================================
#define time_left STM_Timer_Left
static INLINE int32_t STM_Timer_Left(uint32_t deadline)
{
   return (int32_t)(deadline - STM.CNT);
}

//=============================================================================
// STM_Timer_Get_Value
//=============================================================================
#define time_udelay STM_Timer_UDelay
static INLINE void STM_Timer_UDelay(uint32_t count)
{
   uint32_t deadline = STM.CNT + count;
   while (((int32_t)(deadline - STM.CNT)) > 0);
}


//=============================================================================
// STM_TIMER_Get_Base_Frequency
//=============================================================================
uint32_t STM_TIMER_Get_Base_Frequency(void );

//============================================================================
// STM_INTERRUPT_Get_Status
//=============================================================================
bool STM_INTERRUPT_Get_Status(
   STM_Channel_Index_T channel );
//=============================================================================
// STM_INTERRUPT_Clear
//=============================================================================
void STM_INTERRUPT_Clear_Pending(
   STM_Channel_Index_T channel );

#endif

